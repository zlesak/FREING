services:
  gateway:
    image: nginx:1.29.2
    hostname: gateway
    container_name: gateway
    networks:
      freing_network:
        aliases:
          - auth.freing.test
          - freing.test
          - service.freing.test
          - pgadmin.freing.test
    ports:
      - "80:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - freing_network
    depends_on:
      - gateway

  keycloak_web:
    image: quay.io/keycloak/keycloak:23.0.2
    hostname: keycloak_web
    container_name: keycloak-web
    env_file: .env
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db_keycloak:5432/${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_HOSTNAME: auth.freing.test
      KC_HOSTNAME_PORT: 80
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_PROXY: edge
      KC_PROXY_HEADERS: xforwarded
      KC_HTTP_PORT: 8100
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_ENABLED: true
    command: start-dev --import-realm
    depends_on:
      db_keycloak:
        condition: service_healthy
      gateway:
        condition: service_started
    networks:
      - freing_network
    ports:
      - '8100:8100'
    volumes:
      - ./keycloak/freing-realm.json:/opt/keycloak/data/import/freing-realm.json:ro

  db_keycloak:
    image: postgres:17.6
    networks:
      - freing_network
    volumes:
      - postgres_data_keycloak:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file: .env
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db_service_customer:
    image: postgres:17.6
    networks:
      - freing_network
    volumes:
      - postgres_data_customer:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    env_file: .env
    environment:
      POSTGRES_DB: ${CUSTOMER_DB_NAME}
      POSTGRES_USER: ${CUSTOMER_DB_USER}
      POSTGRES_PASSWORD: ${CUSTOMER_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U customer -d customer"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db_service_invoice:
    image: postgres:17.6
    networks:
      - freing_network
    volumes:
      - postgres_data_invoice:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    env_file: .env
    environment:
      POSTGRES_DB: ${INVOICE_DB_NAME}
      POSTGRES_USER: ${INVOICE_DB_USER}
      POSTGRES_PASSWORD: ${INVOICE_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoice -d invoice"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db_service_payment:
    image: postgres:17.6
    networks:
      - freing_network
    volumes:
      - postgres_data_payment:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    env_file: .env
    environment:
      POSTGRES_DB: ${PAYMENT_DB_NAME}
      POSTGRES_USER: ${PAYMENT_DB_USER}
      POSTGRES_PASSWORD: ${PAYMENT_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment -d payment"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db_service_rendering:
    image: postgres:17.6
    networks:
      - freing_network
    volumes:
      - postgres_data_rendering:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    env_file: .env
    environment:
      POSTGRES_DB: ${RENDERING_DB_NAME}
      POSTGRES_USER: ${RENDERING_DB_USER}
      POSTGRES_PASSWORD: ${RENDERING_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rendering -d rendering"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  service_customer:
    build:
      context: ../..
      dockerfile: freing_docker/freing_dev/build_docker/backend-service.Dockerfile
      args:
        SERVICE_DIR: customer-service
    image: freing_service_customer:dev
    container_name: service-customer
    env_file: .env
    environment:
      - SERVER_PORT=8081
      - DB_HOST=db_service_customer
      - DB_PORT=5432
      - DB_NAME=${CUSTOMER_DB_NAME}
      - DB_USER=${CUSTOMER_DB_USER}
      - DB_PASSWORD=${CUSTOMER_DB_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER:-guest}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - CUSTOMER_CLIENT_ID=${CUSTOMER_CLIENT_ID}
      - CUSTOMER_CLIENT_SECRET=${CUSTOMER_CLIENT_SECRET}
    ports:
      - "8081:8081"
    networks:
      - freing_network
    depends_on:
      db_service_customer:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      keycloak_web:
        condition: service_started
      gateway:
        condition: service_started

  service_invoice:
    build:
      context: ../..
      dockerfile: freing_docker/freing_dev/build_docker/backend-service.Dockerfile
      args:
        SERVICE_DIR: invoice-service
    image: freing_service_invoice:dev
    container_name: service-invoice
    env_file: .env
    environment:
      - SERVER_PORT=8082
      - DB_HOST=db_service_invoice
      - DB_PORT=5432
      - DB_NAME=${INVOICE_DB_NAME}
      - DB_USER=${INVOICE_DB_USER}
      - DB_PASSWORD=${INVOICE_DB_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER:-guest}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
    ports:
      - "8082:8082"
    networks:
      - freing_network
    depends_on:
      db_service_invoice:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      keycloak_web:
        condition: service_started
      gateway:
        condition: service_started

  service_payment:
    build:
      context: ../..
      dockerfile: freing_docker/freing_dev/build_docker/backend-service.Dockerfile
      args:
        SERVICE_DIR: payment-service
    image: freing_service_payment:dev
    container_name: service-payment
    env_file: .env
    environment:
      - SERVER_PORT=8083
      - DB_HOST=db_service_payment
      - DB_PORT=5432
      - DB_NAME=${PAYMENT_DB_NAME}
      - DB_USER=${PAYMENT_DB_USER}
      - DB_PASSWORD=${PAYMENT_DB_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER:-guest}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
    ports:
      - "8083:8083"
    networks:
      - freing_network
    depends_on:
      db_service_payment:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      keycloak_web:
        condition: service_started
      gateway:
        condition: service_started

  service_rendering:
    build:
      context: ../..
      dockerfile: freing_docker/freing_dev/build_docker/backend-service.Dockerfile
      args:
        SERVICE_DIR: rendering-service
    image: freing_service_rendering:dev
    container_name: service-rendering
    env_file: .env
    environment:
      - SERVER_PORT=8084
      - DB_HOST=db_service_rendering
      - DB_PORT=5432
      - DB_NAME=${RENDERING_DB_NAME}
      - DB_USER=${RENDERING_DB_USER}
      - DB_PASSWORD=${RENDERING_DB_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER:-guest}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
    ports:
      - "8084:8084"
    networks:
      - freing_network
    depends_on:
      db_service_rendering:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      keycloak_web:
        condition: service_started
      gateway:
        condition: service_started

  frontend:
    build:
      context: ../..
      dockerfile: freing_docker/freing_dev/build_docker/frontend.Dockerfile
    image: freing_frontend:dev
    container_name: frontend
    networks:
      - freing_network
    depends_on:
      service_invoice:
        condition: service_started
      service_customer:
        condition: service_started
      service_payment:
        condition: service_started
      service_rendering:
        condition: service_started
    ports:
      - "4100:4100"
    environment:
      - DOCKER=true

  pgadmin:
    image: dpage/pgadmin4:9.8
    container_name: pgadmin
    env_file: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'True'
    ports:
      - "5050:80"
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db_service_customer:
        condition: service_healthy
      db_service_invoice:
        condition: service_healthy
      db_service_payment:
        condition: service_healthy
      db_service_rendering:
        condition: service_healthy
    networks:
      - freing_network

  backend_builder:
    build:
      context: ../..
      dockerfile: freing_docker/freing_dev/build_docker/backend-builder.Dockerfile
    image: freing-backend-builder:latest
    container_name: backend-builder
    restart: "no"
    command: "true"
    profiles: ["builder"]
    # Tento kontejner se nespouští, pouze buildí image pro ostatní služby

volumes:
  postgres_data_keycloak:
  postgres_data_customer:
  postgres_data_invoice:
  postgres_data_payment:
  postgres_data_rendering:
  pgadmin_data:
  rabbitmq_data:

networks:
  freing_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24